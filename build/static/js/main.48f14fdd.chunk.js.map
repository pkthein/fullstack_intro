{"version":3,"sources":["pages/Home.js","redux/actions/notesActions.js","redux/actions/userActions.js","pages/Login.js","pages/Dashboard.js","pages/Signup.js","App.js","serviceWorker.js","redux/reducers/notesReducer.js","redux/reducers/userReducer.js","redux/reducers/rootReducer.js","index.js"],"names":["connect","state","isLoggedIn","userReducer","to","listNotes","dispatch","getState","axios","get","withCredentials","then","res","type","notes","data","response","setnewNote","catch","err","console","log","newNote","createNewNote","notesReducer","post","note","content","editNote","setEmail","email","setIsLoggedIn","setUsername","username","loginUser","user","cookiePW","password","document","cookie","React","useState","setPassword","verify","includes","alert","md5","className","value","placeholder","onChange","e","newEmail","target","length","onKeyPress","key","onClick","accountLogOut","countViewComp","entry","_id","views","map","ind","promptVal","window","prompt","confirm","editNoteComp","onMouseLeave","author","confPassword","setConfPassword","newUsername","newPassword","newConfPassword","useEffect","split","forEach","piece","path","component","Signup","Dashboard","Login","Home","Boolean","location","hostname","match","DEFAULT_STATE","action","INITIAL_STATE","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48f14fdd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Home = ({isLoggedIn}) => {\r\n\r\n  return (\r\n    <div>\r\n      <h2>Home</h2>\r\n      <h3>Welcome to Note-Taking App</h3>\r\n\r\n      {\r\n        !isLoggedIn && (\r\n          <div>\r\n            Please either 'Log In' or 'Sign Up' to continue...\r\n            <br /><Link to=\"/login\">Login</Link>\r\n            <br /><Link to=\"/signup\">Sign Up</Link>\r\n          </div>\r\n        )\r\n      }\r\n      {\r\n        isLoggedIn && (\r\n          <div>\r\n            Enjoy our wonky WebApp...\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = state => ({\r\n  isLoggedIn: state.userReducer.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStatetoProps)(Home);\r\n","import axios from 'axios';\r\n\r\nconst setNotes = notes => ({\r\n  type: 'NOTES_SET_NOTES',\r\n  notes\r\n})\r\n\r\nexport const listNotes = () => (dispatch, getState) => {\r\n  axios.get('/api/notes/all', { withCredentials: true })\r\n    .then(res => {\r\n      dispatch(setNotes(res.data.response.notes))\r\n      dispatch(setnewNote(''))\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n};\r\n\r\nexport const setnewNote = newNote => ({\r\n  type: 'NOTES_SET_NEW_NOTE',\r\n  newNote\r\n})\r\n\r\nexport const createNewNote = () => (dispatch, getState) => {\r\n  let { newNote } = getState().notesReducer\r\n\r\n  axios.post('/api/notes/new', {\r\n    note: {\r\n      content: newNote\r\n    }\r\n  }, { withCredentials: true })\r\n    .then(res => dispatch(listNotes()))\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n}\r\n\r\nexport const editNote = note => (dispatch, getState) => {\r\n  axios.post('/api/notes/edit', note, { withCredentials: true })\r\n    .then(res => dispatch(listNotes()))\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n}\r\n\r\nexport const countView = _id => (dispatch, getState) => {\r\n  axios.get(`/api/notes/note/${_id}`, { withCredentials: true })\r\n    .then(res => {\r\n      console.log(`This note has been viewed ${res.data.response.views} times`)\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nimport { listNotes } from './notesActions'\r\n\r\nexport const setEmail = email => ({ // 1 param = no parentheses\r\n  type: 'SET_EMAIL',\r\n  email,\r\n  // email: email,\r\n});\r\n\r\nexport const setIsLoggedIn = isLoggedIn => ({\r\n  type: 'SET_IS_LOGGED_IN',\r\n  isLoggedIn,\r\n});\r\n\r\nexport const setUsername = username => ({\r\n  type: 'SET_USERNAME',\r\n  username\r\n})\r\n\r\nexport const registerUser = user => (dispatch, getState) => {\r\n  axios.post(`/api/auth/user/signup`, user, { withCredentials: true })\r\n    .then(res => {\r\n      console.log(res)\r\n      dispatch(setIsLoggedIn(true))\r\n    })\r\n    .catch(res => {\r\n      console.log(res)\r\n    })\r\n}\r\n\r\nexport const loginUser = user => (dispatch, getState) => {\r\n  let cookiePW = user.user.password\r\n  \r\n  axios.post(`/api/auth/user/login`, user, { withCredentials: true })\r\n    .then(res => {\r\n      document.cookie = `email=${res.data.response.user.email}`\r\n      document.cookie = `password=${cookiePW}`\r\n\r\n      dispatch(setUsername(res.data.response.user.username))\r\n      dispatch(setIsLoggedIn(true))\r\n      return\r\n    })\r\n    .then(() => dispatch(listNotes()))\r\n    .catch(res => {\r\n      console.log(res)\r\n    })\r\n}\r\n\r\nexport const logoutUser = () => (dispatch, getState) => {\r\n  axios.post(`api/auth/user/logout`, {}, { withCredentials: true })\r\n    .then(res => {\r\n      dispatch(setEmail(''))\r\n      dispatch(setUsername(''))\r\n      dispatch(setIsLoggedIn(false))\r\n    })\r\n    .catch(res => {\r\n      console.log(res)\r\n    })\r\n}\r\n","import React from 'react';\r\nimport md5 from 'md5'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { setEmail, loginUser } from '../redux/actions/userActions'\r\n\r\nconst Login = ({ dispatch, email, isLoggedIn }) => {\r\n  const [password, setPassword] = React.useState('');\r\n\r\n  const verify = () => {\r\n    if (!email.includes('@') || !email.includes('.')) {\r\n      alert('Not a valid email!')\r\n    } else if (password === '') {\r\n      alert('Invalid email and password pairing!')\r\n    } else {\r\n      dispatch(loginUser({\r\n        user: {\r\n          email, password: md5(password)\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  const updateEmail = (newEmail) => {\r\n    if (newEmail.length < 20) {\r\n      dispatch(setEmail(newEmail))\r\n    }\r\n  }\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to=\"/dashboard\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Log In</h2>\r\n      <div>\r\n        <div className=\"App-header\">\r\n          <input\r\n            value={ email }\r\n            placeholder=\"EMAIL\"\r\n            type=\"text\"\r\n            onChange={ e => updateEmail(e.target.value) }\r\n          />\r\n          <input\r\n            value={ password }\r\n            placeholder=\"PASSWORD\"\r\n            type=\"password\"\r\n            onChange={ e => setPassword(e.target.value) }\r\n            onKeyPress={ e => e.key === 'Enter' ? verify() : '' }\r\n          />\r\n        </div>\r\n        <div>\r\n          <button className=\"button\" onClick={ () => verify() }>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  email: state.userReducer.email,\r\n  isLoggedIn: state.userReducer.isLoggedIn,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Login);\r\n","import React from 'react'\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser } from '../redux/actions/userActions'\r\n\r\nimport {\r\n  setnewNote, createNewNote, editNote, countView\r\n} from '../redux/actions/notesActions'\r\n\r\nconst Dashboard = ({\r\n  dispatch, email, username, notes, isLoggedIn, newNote\r\n}) => {\r\n  const accountLogOut = () => {\r\n    dispatch(logoutUser())\r\n  }\r\n\r\n  const editNoteComp = entry => {\r\n    let promptVal = window.prompt('How would you like to change the note?', '')\r\n\r\n    if (promptVal === null) {\r\n      // console.log('NO')\r\n    } else if (promptVal === '') {\r\n      let comfirmVal = window.confirm('Would you really like to delete the post content?')\r\n\r\n      if (comfirmVal) {\r\n        dispatch(editNote({\r\n          note: {\r\n            _id: entry._id,\r\n            content: 'deleted...'\r\n          }\r\n        }))\r\n      }\r\n    } else {\r\n      dispatch(editNote({\r\n        note: {\r\n          _id: entry._id,\r\n          content: promptVal\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  const countViewComp = entry => {\r\n    dispatch(countView(entry._id))\r\n  }\r\n  \r\n  if (!isLoggedIn) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Dashboard</h2>\r\n        <div>Welcome { username || email }</div>\r\n        <button className=\"button\" onClick={ () => accountLogOut() }>\r\n          Log Out\r\n        </button>\r\n      </div>\r\n\r\n      <div>\r\n        <h2>Notes</h2>\r\n        <div>\r\n          <div>Create notes in the input below.</div>\r\n          <div>To edit, please click on the card below.</div>\r\n          <div>\r\n            Cursor over & off count as reading and will increase the view count. Console log will tell about the views.\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <input\r\n            value={ newNote }\r\n            placeholder=\"New Note\"\r\n            type=\"note\"\r\n            onChange={ e => dispatch(setnewNote(e.target.value)) }\r\n            onKeyPress={\r\n              e => e.key === 'Enter' ? dispatch(createNewNote()) : ''\r\n            }\r\n          />\r\n          \r\n          <button\r\n            className=\"button\"\r\n            onClick={ () => dispatch(createNewNote()) }\r\n          >\r\n            Save\r\n          </button>\r\n          <hr />\r\n        </div>\r\n\r\n        {\r\n          notes.map((note, ind) => (\r\n            <div\r\n              className=\"Note-card\" key={ ind }\r\n              onClick={ () => editNoteComp(notes[ind]) }\r\n              onMouseLeave={ () => countViewComp(notes[ind]) }\r\n            >\r\n              <p>{ note.content }</p>\r\n              <dir className=\"Note-signature\">\r\n                By { note.author.username }\r\n              </dir>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  email: state.userReducer.email,\r\n  username: state.userReducer.username,\r\n  notes: state.notesReducer.notes,\r\n  newNote: state.notesReducer.newNote,\r\n  isLoggedIn: state.userReducer.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","import React from 'react'\r\nimport md5 from 'md5'\r\n\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  setEmail, setUsername, registerUser\r\n} from '../redux/actions/userActions'\r\n\r\nconst Login = ({ dispatch, email, username, isLoggedIn }) => {\r\n  const [password, setPassword] = React.useState('')\r\n  const [confPassword, setConfPassword] = React.useState('')\r\n\r\n  const verify = () => {\r\n    if (!email.includes('@') || !email.includes('.')) {\r\n      alert('Not a valid email!')\r\n    } else if (username === '') {\r\n      alert('Username cannot be empty!')\r\n    } else if (password !== confPassword) {\r\n      alert('Passwords do not match!')\r\n    } else if (password.length < 5) {\r\n      alert('Password must be longer than 5 characters!')\r\n    } else {\r\n      dispatch(registerUser({\r\n        user: {\r\n          username, email, password: md5(password)\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  const updateEmail = (newEmail) => {\r\n    if (newEmail.length < 20) {\r\n      dispatch(setEmail(newEmail))\r\n    }\r\n  }\r\n\r\n  const updateUsername = (newUsername) => {\r\n    if (newUsername.length < 20) {\r\n      dispatch(setUsername(newUsername))\r\n    }\r\n  }\r\n\r\n  const updatePassword = newPassword => {\r\n    if (newPassword.length < 20) {\r\n      setPassword(newPassword)\r\n    }\r\n  }\r\n\r\n  const updateConfPassword = newConfPassword => {\r\n    if (newConfPassword.length < 20) {\r\n      setConfPassword(newConfPassword)\r\n    }\r\n  }\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to=\"/dashboard\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Sign Up</h2>\r\n      <div>\r\n        <div className=\"App-header\">\r\n          <input\r\n            value={ email }\r\n            placeholder=\"EMAIL\"\r\n            type=\"text\"\r\n            onChange={ e => updateEmail(e.target.value) }\r\n          />\r\n          <input\r\n            value={ username }\r\n            placeholder=\"USERNAME\"\r\n            type=\"text\"\r\n            onChange={ e => updateUsername(e.target.value) }\r\n          />\r\n          <input\r\n            value={ password }\r\n            placeholder=\"PASSWORD\"\r\n            type=\"password\"\r\n            onChange={ e => updatePassword(e.target.value) }\r\n          />\r\n          <input\r\n            value={ confPassword }\r\n            placeholder=\"PASSWORD\"\r\n            type=\"password\"\r\n            onChange={ e => updateConfPassword(e.target.value) }\r\n            onKeyPress={ e => e.key === 'Enter' ? verify() : '' }\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <button className=\"button\" onClick={ () => verify() }>\r\n            Submit\r\n          </button>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  email: state.userReducer.email,\r\n  username: state.userReducer.username,\r\n  isLoggedIn: state.userReducer.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps)(Login);\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport { Switch, Route, Link, Redirect } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\nimport Home from './pages/Home';\r\nimport Login from './pages/Login';\r\nimport Dashboard from './pages/Dashboard';\r\nimport Signup from './pages/Signup'\r\n\r\nimport { loginUser } from './redux/actions/userActions'\r\n\r\nconst App = ({ dispatch, isLoggedIn }) => {\r\n\r\n  React.useEffect(() => {\r\n    let email = null\r\n    let password = null\r\n\r\n    document.cookie.split(';').forEach(piece => {\r\n      if (piece.includes('email=')) {\r\n        email = piece.split('=')[1]\r\n      } else if (piece.includes('password=')) {\r\n        password = piece.split('=')[1]\r\n      }\r\n    })\r\n\r\n    if (email) {\r\n      dispatch(loginUser({\r\n        user: {\r\n          email, password\r\n        }\r\n      }))\r\n    }\r\n  }, []); // VERY IMPORTANT NEEDS THE EMPTY ARRAY\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        isLoggedIn && (\r\n          <Redirect to=\"/dashboard\" />\r\n        )\r\n      }\r\n      <div className=\"nav-bar\">\r\n        <div>\r\n          <Link to=\"/\">Home</Link>\r\n        </div>\r\n        {\r\n          !isLoggedIn && (\r\n            <div>\r\n              <Link to=\"/login\">Log In</Link>\r\n              <Link to=\"/signup\">Sign Up</Link>\r\n            </div>\r\n          )\r\n        }\r\n        {\r\n          isLoggedIn && (\r\n            <div>\r\n              <Link to=\"/dashboard\">Dashboard</Link>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n      <Switch>\r\n        <Route path=\"/signup\" component={ Signup } />\r\n        <Route path=\"/dashboard\" component={ Dashboard } />\r\n        <Route path=\"/login\" component={ Login } />\r\n        <Route path=\"/\" component={ Home } />\r\n      </Switch>\r\n\r\n      {/* <div className=\"App-header\">\r\n        <input\r\n          value={username}\r\n          onChange={e => setUsername(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={e => setPassword(e.target.value)}\r\n        />\r\n        <button onClick={validate}>Submit</button>\r\n        <button onClick={fetchProtectedData}>Get Data</button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.userReducer.isLoggedIn,\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const DEFAULT_STATE = {\r\n  notes: [],\r\n  newNote: '',\r\n};\r\n\r\nconst notesReducer = (state = DEFAULT_STATE, action) => {\r\n  switch (action.type) {\r\n    case 'NOTES_SET_NEW_NOTE':\r\n      return {\r\n        ...state,\r\n        newNote: action.newNote\r\n      }\r\n    case 'NOTES_SET_NOTES':\r\n      return {\r\n        ...state,\r\n        notes: action.notes\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default notesReducer;\r\n","// Creating a reducer\r\n\r\n// Step 1 initialize state\r\nconst INITIAL_STATE = {\r\n  email: '',\r\n  username: '',\r\n  isLoggedIn: false\r\n};\r\n\r\n// Step 2 create listener function\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  // Step 3 create switch for action types\r\n  switch (action.type) {\r\n    case 'SET_IS_LOGGED_IN':\r\n      if (!action.isLoggedIn) {\r\n        document.cookie = 'auth=; expires=Thu, 01 Jan 1970 00:00:01 GMT;'\r\n        document.cookie = 'email=; expires=Thu, 01 Jan 1970 00:00:01 GMT;'\r\n        document.cookie = 'password=; expires=Thu, 01 Jan 1970 00:00:01 GMT;'\r\n      }\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn,\r\n      };\r\n    case 'SET_EMAIL':\r\n      return {\r\n        ...state,\r\n        email: action.email,\r\n      };\r\n    case 'SET_USERNAME':\r\n      return {\r\n        ...state,\r\n        username: action.username,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// don't forget to export\r\nexport default userReducer;\r\n","import { combineReducers } from 'redux';\r\nimport notesReducer from './notesReducer';\r\nimport userReducer from './userReducer';\r\n\r\nexport default combineReducers({\r\n  notesReducer,\r\n  userReducer,\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk'; // THIS IS NEW!!\r\nimport rootReducer from './redux/reducers/rootReducer';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}